use App\Mail\ExampleMail;
use Illuminate\Support\Facades\Mail;

public function sendEmail()
{
    $name = 'John Doe'; // Vous pouvez remplacer par une valeur dynamique
    Mail::to('recipient@example.com')->send(new Mail($name));

    return 'Email envoyé avec succès';
}


/*
ETAPE 5 = Fonction controller pour envoyer mail

fichier de conf : .env parti mail
creation dossier mail contenant mail.php
fichier verifmail.blade.php pour le template du mails





















/*===========================================================================================================
                    PROMPT
==========================================================================================================*/

/*


1. Configuration des paramètres d'email
Avant d'envoyer des emails, vous devez configurer les paramètres de votre service de messagerie dans le fichier .env de votre projet Laravel.

Exemple avec un service SMTP comme Mailgun, SendGrid, ou un serveur SMTP classique :

env
Copier le code
MAIL_MAILER=smtp
MAIL_HOST=smtp.example.com
MAIL_PORT=587
MAIL_USERNAME=your-username@example.com
MAIL_PASSWORD=your-email-password
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=your-email@example.com
MAIL_FROM_NAME="${APP_NAME}"
Assurez-vous de remplacer smtp.example.com, your-username@example.com, your-email-password, et autres valeurs par celles de votre fournisseur d'email.

2. Créer un Mailable
Laravel utilise une classe Mailable pour gérer la structure de l'email. Vous pouvez la créer en utilisant Artisan.

Exécutez la commande suivante pour créer un mailable :

bash
Copier le code
php artisan make:mail ExampleMail
Cela génère un fichier dans le répertoire app/Mail/ExampleMail.php.

3. Définir le contenu de l'email
Dans le fichier généré ExampleMail.php, vous pouvez définir le contenu de l'email. Voici un exemple de ce que vous pouvez faire :

php
Copier le code
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class ExampleMail extends Mailable
{
    use Queueable, SerializesModels;

    // Déclaration de variables ou données que vous souhaitez passer à la vue
    public $name;

    /**
     * Créer une nouvelle instance de message.
     *
     * @param string $name
     * @return void
     */ /*
    public function __construct($name)
    {
        $this->name = $name;
    }

    /**
     * Construire le message.
     *
     * @return $this
     *//*
    public function build()
    {
        return $this->subject('Bienvenue sur notre site !')
                    ->view('emails.example');
    }
}
4. Créer la vue de l'email
Les emails dans Laravel sont souvent envoyés à l'aide de vues Blade. Vous devez créer un fichier de vue pour l'email. Par exemple, dans resources/views/emails/example.blade.php :

blade
Copier le code
<!DOCTYPE html>
<html>
<head>
    <title>Bienvenue</title>
</head>
<body>
    <h1>Bonjour, {{ $name }} !</h1>
    <p>Nous sommes ravis de vous accueillir sur notre site.</p>
</body>
</html>
5. Envoyer l'email
Une fois que le mailable est créé et que la vue est définie, vous pouvez envoyer l'email dans vos contrôleurs ou services Laravel.

Dans un contrôleur, vous pouvez envoyer un email comme ceci :

php
Copier le code
use App\Mail\ExampleMail;
use Illuminate\Support\Facades\Mail;

public function sendEmail()
{
    $name = 'John Doe'; // Vous pouvez remplacer par une valeur dynamique
    Mail::to('recipient@example.com')->send(new ExampleMail($name));

    return 'Email envoyé avec succès';
}
6. Tester l'envoi d'email
Une fois tout configuré, vous pouvez tester l'envoi de l'email en accédant à la méthode du contrôleur dans votre application. Si tout est correctement configuré, vous recevrez l'email à l'adresse spécifiée.

7. Gestion des erreurs
En cas d'erreur, vous pouvez consulter les logs Laravel dans storage/logs/laravel.log pour voir ce qui n'a pas fonctionné.

8. Envoi en masse (optionnel)
Si vous avez besoin d'envoyer des emails en masse, Laravel prend également en charge l'envoi d'emails via des files d'attente pour améliorer les performances.

Voici comment envoyer des emails via une file d'attente :

Créez une file d'attente d'email :
bash
Copier le code
php artisan queue:table
php artisan migrate
Utilisez la méthode queue() dans le mailable au lieu de send() :
php
Copier le code
Mail::to('recipient@example.com')->queue(new ExampleMail($name));
Cela mettra l'email dans la file d'attente, et Laravel l'enverra plus tard en arrière-plan.


*/
